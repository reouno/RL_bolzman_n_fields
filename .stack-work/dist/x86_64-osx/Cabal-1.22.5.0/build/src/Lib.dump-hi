
==================== FINAL INTERFACE ====================
2016-02-24 13:14:18.688122 UTC

interface RL004_9OBL1ycyF5WITh50i1ROSZ:Lib 7103
  interface hash: d0fc199701211c6b95f3065da8645946
  ABI hash: 82cdfedd9d3bce42aaf894aa3f5c9764
  export-list hash: 1722f2fc5434d59b5ddfc37ec41e8429
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4c0a7b65a6dddbc4161c2e2bfabe3dc3
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.calc_p
  Lib.change_state
  Lib.choose_action
  Lib.episode
  Lib.episodes
  Lib.ll_nm
  Lib.replace_nm
  Lib.take_action
  Lib.temper
  Lib.update_Q
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Float e532d434ec2447d809887c0fca1d78a5
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
24b1ae6813f0f8aecfbc4ab29e6a71d0
  $w$schoose_action ::
    [GHC.Types.Double]
    -> GHC.Prim.Int# -> GHC.Prim.Double# -> GHC.Prim.Int#
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0] -}
bbe665b9e1f5a246ab7698dc11fba22d
  $wchange_state ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> [[GHC.Types.Double]] -> GHC.Prim.Int#
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Int#
                   w :: [[GHC.Types.Double]] ->
                 case ww1 of ds {
                   DEFAULT -> case Lib.change_state1 ret_ty GHC.Prim.Int# of {}
                   0
                   -> case GHC.List.$wlenAcc
                             @ [GHC.Types.Double]
                             w
                             0 of ww2 { DEFAULT ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# ww (GHC.Prim.-# ww2 1)) of wild {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww (GHC.Prim.-# ww2 1)) of wild1 {
                             GHC.Types.False
                             -> case Lib.change_state1 ret_ty GHC.Prim.Int# of {}
                             GHC.Types.True -> ww }
                        GHC.Types.True -> GHC.Prim.+# ww 1 } }
                   1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.># ww 0) of wild {
                        GHC.Types.False
                        -> case ww of wild1 {
                             DEFAULT -> case Lib.change_state1 ret_ty GHC.Prim.Int# of {}
                             0 -> 0 }
                        GHC.Types.True -> GHC.Prim.-# ww 1 } }) -}
96c5a9e6900863af3354084d5cc1c0d2
  $wchoose_action ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    [a] -> GHC.Prim.Int# -> a -> GHC.Prim.Int#
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(LLLC(C(S))LLLL),U(A,A,A,C(C1(U)),C(C1(U)),A,A,A)><S,1*U><L,U><L,U>,
     Inline: [0] -}
1a1d9ce3e74b25cfa0564f7833b3087b
  $wepisode ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> [[GHC.Types.Double]]
    -> [[GHC.Types.Double]]
    -> [GHC.Types.Double]
    -> (# [[GHC.Types.Double]], GHC.Types.Int #)
  {- Arity: 7,
     Strictness: <L,U><L,U><L,U(U)><L,U(U)><L,U><S,U><S,1*U>,
     Inline: [0] -}
60ac6bab5fb8730c2858c4e197125920
  $wepisodes ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [[GHC.Types.Double]]
    -> [[GHC.Types.Double]]
    -> [GHC.Types.Double]
    -> [[GHC.Types.Double]]
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><S,1*U>,
     Inline: [0] -}
956608e45beefff4c0a7cf3f146061ac
  $wgo :: [GHC.Types.Double] -> GHC.Prim.Double# -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
592e7070821a5023081b8ee2924b1b6b
  $wgo1 :: [GHC.Types.Double] -> GHC.Prim.Double# -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
4006559cb2f7fdba7fa413a47385c1ec
  $wtake_action ::
    GHC.Types.Int
    -> [GHC.Types.Double] -> GHC.Prim.Double# -> GHC.Prim.Int#
  {- Arity: 3, Strictness: <L,1*U(U)><S,U><L,U>, Inline: [0],
     Unfolding: (\ w :: GHC.Types.Int
                   w1 :: [GHC.Types.Double]
                   ww :: GHC.Prim.Double# ->
                 case GHC.List.$wlenAcc @ GHC.Types.Double w1 0 of ww2 { DEFAULT ->
                 Lib.$w$schoose_action
                   (Lib.calc_p_$scalc_p
                      w1
                      (case w of wild { GHC.Types.I# i ->
                       case GHC.Prim.logDouble#
                              (GHC.Prim.+##
                                 (GHC.Prim.*## 1.0e-4 (GHC.Prim.int2Double# i))
                                 1.1) of wild1 { DEFAULT ->
                       case GHC.Prim./## 1.0 wild1 of wild2 { DEFAULT ->
                       GHC.Types.D# wild2 } } }))
                   ww2
                   ww }) -}
667a98d43cfb0524a7afb0564855b564
  calc_p :: GHC.Float.Floating b => [b] -> b -> [b]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(1*U,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><L,U>,
     Unfolding: (\ @ b
                   $dFloating :: GHC.Float.Floating b
                   eta :: [b]
                   eta1 :: b ->
                 let {
                   $dFractional :: GHC.Real.Fractional b
                   = GHC.Float.$p1Floating @ b $dFloating
                 } in
                 let {
                   a :: b -> b = GHC.Float.exp @ b $dFloating
                 } in
                 let {
                   numer :: [b]
                   = GHC.Base.map
                       @ b
                       @ b
                       (\ x :: b -> a (GHC.Real./ @ b $dFractional x eta1))
                       eta
                 } in
                 GHC.Base.map
                   @ b
                   @ b
                   (let {
                      ds :: b
                      = let {
                          $dNum :: GHC.Num.Num b = GHC.Real.$p1Fractional @ b $dFractional
                        } in
                        let {
                          k :: b -> b -> b = GHC.Num.+ @ b $dNum
                        } in
                        letrec {
                          go :: [b] -> b -> b {- Arity: 2, Strictness: <S,1*U><L,U> -}
                          = \ ds1 :: [b] eta2 :: b ->
                            case ds1 of wild { [] -> eta2 : y ys -> go ys (k eta2 y) }
                        } in
                        go numer (GHC.Num.fromInteger @ b $dNum Lib.calc_p1)
                    } in
                    \ ds1 :: b -> GHC.Real./ @ b $dFractional ds1 ds)
                   numer) -}
9bdec42573c4680d1ff9115c073868d0
  calc_p1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 0) -}
017a59ed9979a853a65e55b1eab94244
  calc_p_$scalc_p ::
    [GHC.Types.Double] -> GHC.Types.Double -> [GHC.Types.Double]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>,
     Unfolding: (\ eta :: [GHC.Types.Double] eta1 :: GHC.Types.Double ->
                 let {
                   numer :: [GHC.Types.Double]
                   = GHC.Base.map
                       @ GHC.Types.Double
                       @ GHC.Types.Double
                       (\ x :: GHC.Types.Double ->
                        case x of wild { GHC.Types.D# x1 ->
                        case eta1 of wild1 { GHC.Types.D# y ->
                        case GHC.Prim./## x1 y of wild2 { DEFAULT ->
                        GHC.Types.D# (GHC.Prim.expDouble# wild2) } } })
                       eta
                 } in
                 GHC.Base.map
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   (let {
                      ds :: GHC.Types.Double
                      = case Lib.$wgo numer 0.0 of ww { DEFAULT -> GHC.Types.D# ww }
                    } in
                    \ ds1 :: GHC.Types.Double -> GHC.Float.divideDouble ds1 ds)
                   numer) -}
184a7122abffc285190b0ea9eddcd462
  change_state ::
    GHC.Types.Int
    -> GHC.Types.Int -> [[GHC.Types.Double]] -> GHC.Types.Int
  {- Arity: 3, Strictness: <S,1*U(U)><S(S),1*U(1*U)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GHC.Types.Int
                   w2 :: [[GHC.Types.Double]] ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 case Lib.$wchange_state ww1 ww3 w2 of ww4 { DEFAULT ->
                 GHC.Types.I# ww4 } } }) -}
008f63921b8882e8d0836558edd3423b
  change_state1 :: GHC.Types.Int
  {- Strictness: b -}
5188bbb4da1b946cfedbeb3069216a78
  choose_action ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    [a] -> GHC.Types.Int -> a -> GHC.Types.Int
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><S(LLLC(C(S))LLLL),U(A,A,A,C(C1(U)),C(C1(U)),A,A,A)><S,1*U><S,1*U(U)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   w :: GHC.Num.Num a
                   w1 :: GHC.Classes.Ord a
                   w2 :: [a]
                   w3 :: GHC.Types.Int
                   w4 :: a ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 case Lib.$wchoose_action @ a w w1 w2 ww1 w4 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
ce88e5c48faf41b463514d4da2c2b105
  episode ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> [[GHC.Types.Double]]
    -> [[GHC.Types.Double]]
    -> [GHC.Types.Double]
    -> ([[GHC.Types.Double]], GHC.Types.Int)
  {- Arity: 7,
     Strictness: <S,1*U(U)><S,1*U(U)><L,U(U)><L,U(U)><L,U><S,U><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GHC.Types.Int
                   w2 :: GHC.Types.Int
                   w3 :: GHC.Types.Int
                   w4 :: [[GHC.Types.Double]]
                   w5 :: [[GHC.Types.Double]]
                   w6 :: [GHC.Types.Double] ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 case Lib.$wepisode ww1 ww3 w2 w3 w4 w5 w6 of ww4 { (#,#) ww5 ww6 ->
                 (ww5, ww6) } } }) -}
5deeed1221a7bec4d764385cd03d2729
  episodes ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> [[GHC.Types.Double]]
    -> [[GHC.Types.Double]]
    -> [GHC.Types.Double]
    -> [[GHC.Types.Double]]
  {- Arity: 5, Strictness: <S,1*U(U)><S,1*U(U)><L,U><S,U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GHC.Types.Int
                   w2 :: [[GHC.Types.Double]]
                   w3 :: [[GHC.Types.Double]]
                   w4 :: [GHC.Types.Double] ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Lib.$wepisodes ww1 ww3 w2 w3 w4 } }) -}
110b520415a7b3f7cc7f75a440df6760
  ll_nm :: GHC.Types.Int -> GHC.Types.Int -> [t] -> [[t]]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,U(U)><S,1*U> -}
961b608a4367d2c4e8beaa7c39fc08e9
  replace_nm :: GHC.Types.Int -> GHC.Types.Int -> t -> [[t]] -> [[t]]
  {- Arity: 4, Strictness: <L,U(U)><L,1*U(1*U)><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ t
                   n :: GHC.Types.Int
                   m :: GHC.Types.Int
                   new_value :: t
                   xs :: [[t]] ->
                 Lib.replace_nm1
                   @ [t]
                   n
                   (Lib.replace_nm1 @ t m new_value (GHC.List.!! @ [t] xs n))
                   xs) -}
81965df3f4dfff19ea741f55996c0773
  replace_nm1 :: GHC.Types.Int -> t -> [t] -> [t]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(1*U)><L,U><S,1*U> -}
4276b68e0668a2ff6da50bb01ba481ef
  take_action ::
    GHC.Types.Int
    -> [GHC.Types.Double] -> GHC.Types.Double -> GHC.Types.Int
  {- Arity: 3, Strictness: <L,1*U(U)><S,U><S,1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: [GHC.Types.Double]
                   w2 :: GHC.Types.Double ->
                 case w2 of ww { GHC.Types.D# ww1 ->
                 case Lib.$wtake_action w w1 ww1 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
b887dff63811c8c7bed2e9edc66c5d01
  temper :: GHC.Types.Int -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ t :: GHC.Types.Int ->
                 case t of wild { GHC.Types.I# i ->
                 case GHC.Prim.logDouble#
                        (GHC.Prim.+##
                           (GHC.Prim.*## 1.0e-4 (GHC.Prim.int2Double# i))
                           1.1) of wild1 { DEFAULT ->
                 case GHC.Prim./## 1.0 wild1 of wild2 { DEFAULT ->
                 GHC.Types.D# wild2 } } }) -}
0a655f67bc72de148f7b43c20f5c5a4e
  update_Q ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Double
    -> [[GHC.Types.Double]]
    -> [[GHC.Types.Double]]
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><L,1*U(U)><S,U>,
     Unfolding: (\ state :: GHC.Types.Int
                   action :: GHC.Types.Int
                   reward :: GHC.Types.Double
                   qs :: [[GHC.Types.Double]] ->
                 Lib.replace_nm1
                   @ [GHC.Types.Double]
                   state
                   (Lib.replace_nm1
                      @ GHC.Types.Double
                      action
                      (case action of ww { GHC.Types.I# ww1 ->
                       case GHC.List.$w!!
                              @ GHC.Types.Double
                              (GHC.List.!! @ [GHC.Types.Double] qs state)
                              ww1 of wild { GHC.Types.D# x ->
                       case reward of wild1 { GHC.Types.D# x1 ->
                       case state of ww2 { GHC.Types.I# ww3 ->
                       case Lib.$wchange_state ww3 ww1 qs of ww4 { DEFAULT ->
                       case GHC.List.$w!! @ [GHC.Types.Double] qs ww4 of wild2 {
                         [] -> Lib.update_Q1
                         : ipv ipv1
                         -> case ipv of ww5 { GHC.Types.D# ww6 ->
                            case Lib.$wgo1 ipv1 ww6 of ww7 { DEFAULT ->
                            GHC.Types.D#
                              (GHC.Prim.+##
                                 x
                                 (GHC.Prim.*##
                                    0.1
                                    (GHC.Prim.-##
                                       (GHC.Prim.+## x1 (GHC.Prim.*## 0.9 ww7))
                                       x))) } } } } } } } })
                      (GHC.List.!! @ [GHC.Types.Double] qs state))
                   qs) -}
a0d17ad15a0d5bd5c85a377eb77c3b69
  update_Q1 :: GHC.Types.Double
  {- Strictness: b -}
"SPEC calc_p @ Double" [ALWAYS] forall $dFloating :: GHC.Float.Floating
                                                       GHC.Types.Double
  Lib.calc_p @ GHC.Types.Double $dFloating = Lib.calc_p_$scalc_p
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

